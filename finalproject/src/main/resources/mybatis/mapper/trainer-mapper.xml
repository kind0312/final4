<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="trainer">



	<!-- 훈련사 목록 조회 mapper-->
	  <select id="list" resultType="TrainerListVO">

     <!--  select nvl(R.cnt,0) cnt , nvl(CEIL(R.avg),0) avg,
      T.trainer_no, T.member_id,T.trainer_profile, T.trainer_profile_content,
      M.member_name,M.member_tel,M.member_email,M.member_gender  from trainer T
      inner join member M on T.member_id = M.member_id left outer join
      (select trainer_no, count(*) cnt, avg(review_good) avg 
      from review group by trainer_no)
      R on R.trainer_no = T.trainer_no--> 

      select nvl(R.cnt,0) cnt , nvl(CEIL(R.avg),0) avg, 
	    T.trainer_no, T.member_id, T.trainer_profile, T.trainer_profile_content,
	    M.member_name,M.member_tel,M.member_email,M.member_gender,img.files_no 
	    from trainer T inner join member M on T.member_id = M.member_id
	    inner join member_img img on T.member_id = img.member_id 
	    left outer join
	    (select trainer_no, count(*) cnt, avg(review_good) avg 
	    from review group by trainer_no)
	    R on R.trainer_no = T.trainer_no order by cnt desc

      </select>
      
      <!-- 훈련사 목록 조회 mapper-->
	  <select id="listAvg" resultType="TrainerListVO">
      select nvl(R.cnt,0) cnt , nvl(CEIL(R.avg),0) avg, 
	    T.trainer_no, T.member_id, T.trainer_profile, T.trainer_profile_content,
	    M.member_name,M.member_tel,M.member_email,M.member_gender,img.files_no 
	    from trainer T inner join member M on T.member_id = M.member_id
	    inner join member_img img on T.member_id = img.member_id 
	    left outer join
	    (select trainer_no, count(*) cnt, avg(review_good) avg 
	    from review group by trainer_no)
	    R on R.trainer_no = T.trainer_no order by avg desc
      </select> 
      
      <!-- 훈련사 단일 조회 mapper -->
      <select id="selectOne"  parameterType="int" resultType="TrainerListVO">
       select nvl(R.cnt,0) cnt , nvl(CEIL(R.avg),0) avg, T.trainer_no, T.member_id, T.trainer_like,img.files_no,
      T.trainer_profile, T.trainer_profile_content,
      M.member_name,M.member_tel,M.member_email,M.member_gender from trainer T
      inner join member M on T.member_id = M.member_id
       inner join member_img img on T.member_id = img.member_id 
       left outer join (select trainer_no, count(*) cnt, avg(review_good) avg 
      from review group by trainer_no)
      R on R.trainer_no = T.trainer_no where T.trainer_no = #{trainerNo}
      </select>
      
      <!-- 훈련사 단일 리뷰 조회 -->
      <select id="selectReviewOne" parameterType="int" resultType="ReviewVO">
      select * from 
			(select r.*, row_number() over(partition by review_no order by pet_no) as rn 
				from review_list_view r) where rn = 1 and trainer_no = #{trainerNo} order by review_good desc
      </select>
      
      <select id="selectReviewOneBad" parameterType="int" resultType="ReviewVO">
      select * from 
			(select r.*, row_number() over(partition by review_no order by pet_no) as rn 
				from review_list_view r) where rn = 1 and trainer_no = #{trainerNo} order by review_good asc
      </select>

      <insert id="trainerProfileInsert" parameterType="TrainerDto"> 
      insert into trainer
		(trainer_no, member_id, apply_no, trainer_profile, trainer_profile_content)
		values(trainer_seq.nextval, '#{memberId}', #{applyNo},  #{trainerProfile},
		#{trainerProfileContent})
      </insert>
      
        <!--parameterType="map" 관리자 훈련사 검색 --> 
        <select id="search"  parameterType="map" resultType="TrainerListVO">
   		select nvl(R.cnt,0) cnt , nvl(CEIL(R.avg),0) avg, 
	    T.trainer_no, T.member_id, T.trainer_profile, T.trainer_profile_content,
	    M.member_name,M.member_tel,M.member_email,M.member_gender,img.files_no 
	    from trainer T inner join member M on T.member_id = M.member_id
	    inner join member_img img on T.member_id = img.member_id 
	    left outer join
	    (select trainer_no, count(*) cnt, avg(review_good) avg 
	    from review group by trainer_no)
	    R on R.trainer_no = T.trainer_no
        
        <if test="type!=null and keyword !=null">
        where instr(${type},#{keyword})>0
       order by ${type} asc 
        
         </if>
        </select>    
        

      <!-- 훈련사 단일조회(id)로 조회 -->
      <select id="selectOnePro" parameterType="String" resultType="TrainerDto">
      	select * from trainer where member_id = #{memberId}
      </select>
      
	  <!-- 훈련사 단일조회(no)로 조회 -->
      <select id="selectOneProNo" parameterType="int" resultType="TrainerOneVO">
      	select t.member_id, m.member_name, img.files_no from trainer t 
		    inner join member m on t.member_id=m.member_id
		    inner join member_img img on m.member_id=img.member_id
		    where t.trainer_no = #{trainerNo}
      </select>
      
      <!-- trainer 테이블 member_id로 단일조회 -->
      <select id="selectOneTrainerNo" parameterType="String" resultType="int">
        select trainer_no from trainer where member_id = #{memberId}
      </select>
      
      
      
      <update id="trainerProfileUpdate" parameterType="TrainerDto">
      update trainer set trainer_profile=#{trainerProfile}, trainer_profile_content=#{trainerProfileContent} where trainer_no= #{trainerNo}
      </update>
      
      <!-- 트레이너 번호로 트레이너 id찾기 -->
      <select id="selectOneTrainerId" parameterType="int" resultType="String">
      	select member_id from trainer where trainer_no =#{trainerNo}
      </select>
      
      <!-- 훈련사 id로 단일 조회 mapper -->
      <select id="selectOneId"  parameterType="string" resultType="TrainerListVO">
      select nvl(R.cnt,0) cnt , nvl(CEIL(R.avg),0) avg, T.trainer_no, T.member_id, T.trainer_like,
      T.trainer_profile, T.trainer_profile_content,
      M.member_name,M.member_tel,M.member_email,M.member_gender from trainer T
      inner join member M on T.member_id = M.member_id left outer join
      (select trainer_no, count(*) cnt, avg(review_good) avg 
      from review group by trainer_no)
      R on R.trainer_no = T.trainer_no where T.member_id = #{memberId}
      </select>
      
        <select id="sequence" resultType="int">
          select trainer_seq.nextval from dual
        </select>
        
        <insert id="insert" parameterType="TrainerDto">
        insert into trainer(
        trainer_no,
        member_id,
        apply_no,
        trainer_profile,
        trainer_profile_content,
        trainer_like
        )
        values(
        trainer_seq.nextval,
        #{memberId},
        #{applyNo},
        #{trainerProfile},
        #{trainerProfileContent},
        #{trainerLike}
    )
        </insert>
        
        <!-- 홈화면 리뷰개수 기준 트레이너 1~3위까지 출력 -->
        <select id="mainTrainerList" resultType="TrainerListVO">
        	select * from 
				(select rownum rn, TMP.* from 
				(select c.*, t.member_id, m.member_name, mi.files_no from (select a.*, b.trainerLike 
				from (select trainer_no, count(*) cnt from review group by trainer_no) a 
				left outer join 
				(select trainer_no, count(*) trainerLike from trainer_like group by trainer_no) b 
				on a.trainer_no=b.trainer_no) c inner join trainer t on c.trainer_no=t.trainer_no
				inner join member m on t.member_id=m.member_id
				inner join member_img mi on m.member_id=mi.member_id order by c.cnt desc)TMP ) where rn between 1 and 3
        </select>
        

</mapper>